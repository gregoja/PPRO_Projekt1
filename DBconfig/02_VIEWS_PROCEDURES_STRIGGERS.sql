CREATE VIEW taged_products_6
AS
SELECT products.PRODUCT_ID,products.NAME,products.PRICE,tags.TAGNAME, tags.COLOR,products.PICTURE_URL FROM products NATURAL JOIN tags
WHERE (tags.TAG_ID = 1 or tags.TAG_ID = 2) AND products.ARCHIVED = 0
ORDER BY ADDED DESC 
LIMIT 6;


CREATE VIEW product_page
AS
SELECT `PRODUCT_ID`,products.`NAME`,product_categories.`NAME` AS "Category",`PRICE`,`TAGNAME`,`COLOR`,`PICTURE_URL`,`ADDED` FROM `products` LEFT JOIN tags ON products.TAG_ID = tags.TAG_ID JOIN product_categories ON product_categories.CATEGORY_ID = products.CATEGORY_ID WHERE products.ARCHIVED = 0;

CREATE VIEW administration_producsts
AS
Select `PRODUCT_ID`,products.`NAME`,`PICTURE_URL`,`PRICE`,product_categories.NAME AS "CATEGORY_NAME",tags.TAGNAME,`ADDED` FROM products JOIN product_categories ON products.CATEGORY_ID = product_categories.CATEGORY_ID LEFT JOIN tags ON tags.TAG_ID = products.TAG_ID WHERE products.ARCHIVED = 0 ORDER BY ADDED DESC;

CREATE VIEW administration_orders
AS
SELECT `ORDER_ID`, `CITY`, `EMAIL`, `FIRSTANAME`, `HOUSE_NUMBER`, `LASTNAME`, `STREET`, `TEL_NUMBER`, `ZIP_CODE`, `STATE`, `PHONE_PREFIX`, `USER_ID`, `ORDERED` FROM `orders` WHERE orders.COMPLETED LIKE 0 ORDER BY 1;

/* Procedures*/
DELIMITER $$
CREATE PROCEDURE `postReview`(IN `P_PRODUCT_ID` INT(11),IN `P_USER_ID` INT(11),IN `P_REVIEW` TEXT,IN `P_STARS` int(11))
BEGIN 

DECLARE EXIT HANDLER FOR SQLEXCEPTION 
BEGIN
	ROLLBACK;
	RESIGNAL;
END;
START TRANSACTION;
	SET @rows = (SELECT hasReview(`P_PRODUCT_ID`,P_USER_ID));
    IF  @rows = 0 THEN 
		INSERT INTO `reviews`(`REVIEW`, `STARS`, `USER_ID`, `PRODUCT_ID`) VALUES (P_REVIEW,P_STARS,P_USER_ID,P_PRODUCT_ID);
	ELSE
		UPDATE `reviews` SET `REVIEW`=P_REVIEW,`STARS`=P_STARS WHERE`USER_ID`=P_USER_ID AND`PRODUCT_ID`=P_PRODUCT_ID;
	END IF;
COMMIT;    
END$$
DELIMITER ;


/*TRIGGERS*/

DELIMITER $$
CREATE TRIGGER TR_order_rows_BD 
BEFORE DELETE ON order_rows 
FOR EACH ROW
BEGIN
  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'DELETE cancelled'; 
END $$
DELIMITER ;